#!/usr/bin/env python3

"""
Analyzes cell counts compared with treatment effectiveness and makes a box plot thereof.

Answers Question 2 in the Python section of the assignment.

Author: Toby Reid
"""

import argparse
import sys

from common import DEFAULT_DELIMITER, ValidatePathAction, ExpandPathAction


def parse_args(args: list[str], exit_on_fail: bool=True) -> argparse.Namespace:
    """TODO"""
    parser = argparse.ArgumentParser(
        description=("Reads and interprets cell counts compared to treatment effectiveness in "
                     "various samples, creating a box plot to help in analyzation."),
        epilog=("If a relative cell count (percentage) CSV is not provided, the relative cell "
                "counter tool will be used to generate one in the process.")
    )
    parser.add_argument(
        "treatment_csv",
        action=ValidatePathAction,
        help="The CSV file containing treatment and cell count data (e.g., cell-count.csv)",
    )
    parser.add_argument(
        "relative_cell_count_csv",
        action=ValidatePathAction,
        required=False,
        help=("A CSV file containing relative cell counts, as generated by relative_cell_counter. "
              "If none is provided, one will be generated (the output of which can be set with the "
              "'-o' flag; otherwise, it will be printed to console)"),
    )
    parser.add_argument(
        "-o", "--output",
        action=ExpandPathAction,
        help="The output CSV file, if generating a relative cell count CSV",
    )
    parser.add_argument(
        "-b", "--boxplot",
        action=ExpandPathAction,
        help=("The file to save the generated boxplot as. If none is provided, instead of "
              "generating a boxplot, the quartiles and median will be printed to console"),
    )
    parser.add_argument(
        "-d", "--delimiter",
        default=DEFAULT_DELIMITER,
        help=("The delimiter used in the given CSV, and to use in the output CSV (default is '"
              f"{DEFAULT_DELIMITER}')"),
    )
    if exit_on_fail:
        return parser.parse_args(args)
    return parser.parse_known_args(args)[0]


def main(args: list[str]) -> int:
    """TODO"""
    arg_values = parse_args(args)
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
